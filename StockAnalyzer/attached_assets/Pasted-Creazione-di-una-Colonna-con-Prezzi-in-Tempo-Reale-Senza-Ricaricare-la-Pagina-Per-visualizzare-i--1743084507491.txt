Creazione di una Colonna con Prezzi in Tempo Reale (Senza Ricaricare la Pagina)
Per visualizzare i prezzi degli asset in tempo reale in una tabella HTML/JavaScript (o in un'app Python con WebSocket), possiamo usare due approcci principali:

WebSocket (comunicazione bidirezionale, più efficiente).

Polling periodico (richieste HTTP ogni X secondi, più semplice).

Ecco come implementarli:

Metodo 1: WebSocket (Soluzione Professionale)
Tecnologie:

Frontend: JavaScript + WebSocket API.

Backend: Python (FastAPI, Django Channels) o Node.js.

Passo 1: Backend (Python con FastAPI + WebSocket)
python
Copy
# Installare: pip install fastapi uvicorn websockets
from fastapi import FastAPI, WebSocket
import json
import random

app = FastAPI()

@app.websocket("/ws/prices")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        # Simuliamo dati di mercato (sostituire con API reali)
        fake_prices = {
            "AAPL": round(180 + random.uniform(-2, 2), 2),
            "TSLA": round(700 + random.uniform(-10, 10), 2),
        }
        await websocket.send_text(json.dumps(fake_prices))
        await asyncio.sleep(1)  # Aggiornamento ogni 1 secondo
Passo 2: Frontend (JavaScript)
html
Copy
<table id="assets-table">
    <thead><tr><th>Asset</th><th>Prezzo</th></tr></thead>
    <tbody>
        <tr><td>AAPL</td><td id="AAPL-price">-</td></tr>
        <tr><td>TSLA</td><td id="TSLA-price">-</td></tr>
    </tbody>
</table>

<script>
const ws = new WebSocket("ws://localhost:8000/ws/prices");

ws.onmessage = (event) => {
    const prices = JSON.parse(event.data);
    for (const [asset, price] of Object.entries(prices)) {
        document.getElementById(`${asset}-price`).textContent = price;
    }
};
</script>
Run HTML
Risultato:

I prezzi si aggiornano in tempo reale senza refresh.

Richiede un server WebSocket (es: uvicorn main:app --reload).

Metodo 2: Polling con JavaScript (Soluzione Semplice)
Se non puoi usare WebSocket, puoi usare richieste HTTP periodiche (meno efficiente, ma funziona).

Frontend (JavaScript + Fetch API)
html
Copy
<table id="assets-table">
    <thead><tr><th>Asset</th><th>Prezzo</th></tr></thead>
    <tbody>
        <tr><td>AAPL</td><td id="AAPL-price">-</td></tr>
        <tr><td>TSLA</td><td id="TSLA-price">-</td></tr>
    </tbody>
</table>

<script>
async function fetchPrices() {
    const response = await fetch("/api/prices");  // Il tuo endpoint API
    const prices = await response.json();
    for (const [asset, price] of Object.entries(prices)) {
        document.getElementById(`${asset}-price`).textContent = price;
    }
}

// Aggiorna ogni 3 secondi
setInterval(fetchPrices, 3000);
</script>
Run HTML
Backend (API in Python)
python
Copy
from fastapi import FastAPI
import random

app = FastAPI()

@app.get("/api/prices")
def get_prices():
    return {
        "AAPL": round(180 + random.uniform(-2, 2), 2),
        "TSLA": round(700 + random.uniform(-10, 10), 2),
    }
Problemi del polling:

Ritardo tra aggiornamenti.

Traffico HTTP più alto rispetto a WebSocket.

Metodo 3: Soluzione Pronta con Librerie
Se vuoi una soluzione rapida:

TradingView Lightweight Charts:

html
Copy
<script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
<div id="chart"></div>
<script>
const chart = LightweightCharts.createChart(document.getElementById('chart'));
const lineSeries = chart.addLineSeries();
lineSeries.setData([{ time: '2023-01-01', value: 100 }]);

// Simulazione aggiornamento in tempo reale
setInterval(() => {
    lineSeries.update({ time: new Date(), value: Math.random() * 100 });
}, 1000);
</script>
Run HTML
Conclusione
Metodo	Vantaggi	Svantaggi
WebSocket	Aggiornamento immediato, efficiente	Richiede backend dedicato
Polling	Facile da implementare	Latenza, traffico elevato
Librerie	Pronto all'uso (es: TradingView)	Meno personalizzabile